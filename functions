## Functions ##
###################################################################

function scpcis() { scp vidit@cislinux.cis.ksu.edu:"$1" $2 ;}
function mysql() { ssh -t cislinux 'mysql -p -h mysql.cis.ksu.edu';}
function mtdroid() { hdiutil attach /Volumes/DATA/android.dmg.sparseimage -mountpoint /Volumes/android; }
function undroid() { hdiutil unmount /Volumes/android; }
function ipc() { ip | tr -d '\n' | pbcopy ; }

# Dictionary
function dict() { curl dict://dict.org/d:$1 ; }
# Encode query, used by google function below
function qenc() { echo -n $@ | perl -pe's/([^-_.~A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg'; }

# Search google
function google() { open -a "Google Chrome"  http://www.google.com/search?hl=en#q="`qenc $@`" ;}

# Create a scp command with current directory
function scpd() {
  port = $(ipconfig getifaddr en0 | tr '.' ' ' | awk '{print "1682"$4}');
  dir  = $(pwd);
  cip  = $(ip);
  if [[ -z $port ]]; then
      echo -n "scp vidit@$cip:$dir/$1" | pbcopy ;
  else
      echo -n "scp -P $port vidit@$cip:$dir/$1" | pbcopy ;
  fi
}

# Prints to remote server at cislinux
function rprint() {
  local printer_name="";
  if [ $# -lt 1 -o $# -gt 2 ]; then
    echo "Usage: print [printername] filename";
  elif [ $# -eq 1 ]; then
    echo "Print to default server.. n126";
    ssh cislinux lpr -P n126-hp9050 < "$1";
  else
    if [ "$1" == "n126" ]; then
      printer_name="n126-hp9050";
    elif [ "$1" == "n16" ]; then
      printer_name="n016-hp9050";
    elif [ "$1" == "n316" ]; then
      printer_name="n316-hp4600";
    elif [ "$1" == "n324" ];  then
      printer_name="n324-hp4300";
    fi

    if [ printer_name != "" ]; then
      echo "Printing to server.. $printer_name";
      ssh cislinux lpr -P "$printer_name" < "$2";
    else
      echo "Printing to server.. $1";
      ssh cislinux "lpr -P \"$1\" < \"$2\"";
    fi
  fi;
}

# Simple calculator
function calc() {
  local result="";
  local input="";

  # Check for options
  if [ "$1" == "-o" ]; then
    input="obase=8;${*:2}\n";
  elif [ "$1" == "-x" ]; then
    input="obase=16;${*:2}\n";
  else
    input="$*\n";
  fi;

  result="$(printf "scale=10;$input" | bc --mathlib | tr -d '\\\n')"
  #                           └─ default (when `--mathlib` is used) is 20
  #
  if [[ "$result" == *.* ]]; then
    # improve the output for decimal numbers
    printf "$result" |
    sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
        -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
        -e 's/0*$//;s/\.$//'   # remove trailing zeros
  else
    printf "$result"
  fi
  printf "\n"
}

##########################################################################
# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified."
    return 1
  fi

  local domain="${1}"
  echo "Testing ${domain}…"
  echo # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_header, no_serial, no_version, \
      no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
      echo "Common Name:"
      echo # newline
      echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
      echo # newline
      echo "Subject Alternative Name(s):"
      echo # newline
      echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
        | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
      return 0
  else
    echo "ERROR: Certificate not found.";
    return 1
  fi
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'title' 'body'` or `echo 'body' | note`
# Title is optional
function note() {
  local title
  local body
  if [ -t 0 ]; then
    title="$1"
    body="$2"
  else
    title=$(cat)
  fi
  osascript >/dev/null <<EOF
tell application "Notes"
  tell account "iCloud"
    tell folder "Notes"
      make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
    end tell
  end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
  local text
  if [ -t 0 ]; then
    text="$1" # argument
  else
    text=$(cat) # pipe
  fi
  osascript >/dev/null <<EOF
tell application "Reminders"
  tell the default list
    make new reminder with properties {name:"$text"}
  end tell
end tell
EOF
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
  local port="${1:-4000}"
  local ip=$(ipconfig getifaddr en1)
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}"
}

# Compare original and gzipped file size
function gz() {
  local origsize=$(wc -c < "$1")
  local gzipsize=$(gzip -c "$1" | wc -c)
  local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
  printf "orig: %d bytes\n" "$origsize"
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  else # pipe
    python -mjson.tool | pygmentize -l javascript
  fi
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar"
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
  )

  local cmd=""
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli"
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz"
    else
      cmd="gzip"
    fi
  fi

  echo "Compressing .tar using \`${cmd}\`…"
  "${cmd}" -v "${tmpFile}" || return 1
  [ -f "${tmpFile}" ] && rm "${tmpFile}"
  echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Use Git’s colored diff when available
# hash git &>/dev/null
# if [ $? -eq 0 ]; then
#   function diff() {
#     git diff --no-index --color-words "$@"
#   }
# fi

function brewdeps() {
  brew list | while read cask; do echo -n -e "\033[34m$cask ->\033[30m"; brew deps $cask | awk '{printf(" %s ", $0)}'; echo ""; done
}

function epoch() {
  if [ "$1" == "-d" ]; then
    date -d "$2" +%s;
  elif [ "$1" == "-s" ]; then
    date "@$2";
  else
    date +%s;
  fi
}

function moar() {
  $* | more;
}

function extract() {
  if [ $# -ne 1 ]
  then
    echo "Error: No file specified."
    return 1
  fi
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2 | *.tar.gz | *.tar | *.tbz2 | *.tgz) tar xvf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.rar) unrar x $1 ;;
      *.gz) gunzip $1 ;;
      *.zip | *.jar) unzip $1 ;;
      *.Z) uncompress $1 ;;
      *.7z) 7z x $1 ;;
      *) echo "'$1' cannot be extracted via extract" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

